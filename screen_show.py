# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'screen_show.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PySide6 import QtCore, QtGui, QtWidgets
from PySide6.QtGui import QCursor, QPixmap, QScreen,QShortcut,QKeySequence,Qt
import sys
import os
import datetime
from PIL import ImageGrab, ImageQt


# 因为此ui要作为子窗口被调用，所以要修改继承的类
class Ui_MainWindow(QtWidgets.QMainWindow):

    def __init__(self, app, img, sx, sy, sw, sh, sc):
        super(Ui_MainWindow, self).__init__()
        self.setupUi(self)

        self.app = app
        self.sx = sx
        self.sy = sy
        self.sw = sw
        self.sy = sh
        self.img = img
        self.scale = sc

        self.cap = None

        pixmap = QPixmap('data/imgs/mouse.png')
        cursor = QCursor(pixmap)
        self.setCursor(cursor)

        self.setGeometry(sx, sy, sw, sh)

        # 创建QPoint类型的数据，因为pyqt监听鼠标事件返回的坐标点是Qpoint类型
        self.firstPoint = QtCore.QPoint()
        self.endPoint = QtCore.QPoint()

        self.setWindowFlags(QtCore.Qt.WindowType.WindowStaysOnTopHint)  # 让窗口显示在屏幕的最上层
        self.setWindowState(QtCore.Qt.WindowFullScreen)  # 窗口全屏幕

        # 设置画图事件

    def paintEvent(self, a0: QtGui.QPaintEvent) -> None:
        # QPainter是在窗体中用来绘制的类
        paint = QtGui.QPainter(self)
        # 把图片绘制到窗体中，前两个0表示图片相对窗体左上角的位置，这里设置0，0为了让窗体全屏幕显示
        # paint.drawPixmap(0, 0, QtGui.QPixmap('./屏幕快照.png'))
        cap = QtGui.QPixmap(ImageQt.toqimage(self.img))
        cap.setDevicePixelRatio(self.scale)
        paint.drawPixmap(0, 0, cap)
        # 设置绘图时画笔的颜色
        paint.setPen(QtCore.Qt.red)
        # 绘制矩形的方法，其中的参数来自鼠标事件
        paint.drawRect(self.firstPoint.x(), self.firstPoint.y(), self.endPoint.x() - self.firstPoint.x(),
                       self.endPoint.y() - self.firstPoint.y())

    def mousePressEvent(self, a0: QtGui.QMouseEvent) -> None:
        self.firstPoint = a0.pos()

    def mouseMoveEvent(self, a0: QtGui.QMouseEvent) -> None:
        self.endPoint = a0.pos()
        self.update()

    def mouseReleaseEvent(self, a0: QtGui.QMouseEvent) -> None:
        self.endPoint = a0.pos()
        self.update()
        # 这里截图需要注意一点，前两个参数都进行了加一个像素单位的处理，目的是为了截图完成后排除画笔画出来的矩形边框

        cap_x1 = min(self.firstPoint.x(), self.endPoint.x()) * self.scale
        cap_x2 = max(self.firstPoint.x(), self.endPoint.x()) * self.scale
        cap_y1 = min(self.firstPoint.y(), self.endPoint.y()) * self.scale
        cap_y2 = max(self.firstPoint.y(), self.endPoint.y()) * self.scale

        if abs(cap_x1 - cap_x2) < 5 or abs(cap_y1 - cap_y2) < 5:
            self.close()

        self.cap = self.img.crop((cap_x1, cap_y1, cap_x2, cap_y2))

        self.close()

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(723, 491)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 723, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))

    def closeEvent(self, event) -> None:
        if self.cap is not None:
            self.app.grab_search_word(self.cap)
        event.accept()
